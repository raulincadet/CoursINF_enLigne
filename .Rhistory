x<-c(2,3,5,7)
if(x<4){
print(x)
}
if(x<4){
y=x
}
y
x<-2:12
x
# si x est inferieur à 6, y=x+1
# dans le cas contraire, y=x
# ifelse(condition,vrai,fausse)
y=ifelse(x<6,x+1,x)
y
z<-sample(10)
z
x<-2:12
x
# si x est inferieur a 6, y=x+1
# dans le cas contraire, y=x
# ifelse(condition,vrai,fausse)
y=ifelse(x<6,x+1,x)
y
z
20%/%2
# creation d'un vecteur p ou p est egale a 1 si z est un nombre pair,
# et 0 dans le cas contraire
p<-ifelse(z%%2,1,0)
p
# creation de m ou m indique les multiples de 2 et de 3
m<-ifelse(z%%2,'Multiple de 2',
ifelse(z%%3,'Multiple de 3',"Ni l'un, ni l'autre"))
m
z
# creation de m ou m indique les multiples de 2 et de 3
m<-ifelse(z%%2==0,'Multiple de 2',
ifelse(z%%3==0,'Multiple de 3',"Ni l'un, ni l'autre"))
m
z
######################################################################
# creation d'une variable binaire ou u est egale a 0 si z est inferieur
# ou egale a 5. Dans le contraire, u est egale a 1.
u<-ifelse(z%%2==0,1,0)
u
######################################################################
# creation d'une variable binaire ou u est egale a 0 si z est inferieur
# ou egale a 5. Dans le contraire, u est egale a 1.
u<-ifelse(z<=5,1,0)
u
z
######################################################################
# creation de n ou n indique les multiples de 2, multiples de 3,
# multiples de 2 et 3 a la fois.
n<-ifelse(z%%2==0 & z%%3==0,"Multiple de 2 et 3",
ifelse(z%%2==0,"Multiple de 2",
ifelse(z%%3==0,"Multiple de 3","Ni l'un, ni l'autre")))
n
z
age<-abs(rnorm(50,m=20,sd=7));age
age<-abs(rnorm(50,m=20,sd=10));age
age<-abs(rnorm(50,m=25,sd=15));age
age<-abs(rnorm(50,m=25,sd=15));age
age<-round(abs(rnorm(50,m=25,sd=15)));age
library(xlsx)
write.xlsx(age,'Age.xlsx',sheetName = 'Age')
library(xslx)
read.xlsx('Age.xlsx')
read.xlsx('Age.xlsx',sheetName = 'Age')
df=read.xlsx('Age.xlsx',sheetName = 'Age')
View(df)
#########################333
categ<-ifelse(df$Age<18,'Enfant','Audulte')
# Creer un objet qui scinde les gens en deux categories:
# les enfants: 0 - 18 ans
# les adultes: 18 ans et plus
categ<-ifelse(df$Age<18,'Enfant','Adulte')
categ
# on peut ajouter le nouvel objet dans le data frame
df['categorie']<-ifelse(df$Age<18,'Enfant','Adulte')
df['Kategori']<-categ
df[catLarge]<-ifelse(df$Age<=3,'Bébé',
ifelse(df$Age<=8,'Enfant',
ifelse(df$Age<=11,'Pré-ado',
ifelse(df$Age<=15,'Adolescent',
ifelse(df$Age<=25,'Jeune','Adulte')))))
df['catLarge']<-ifelse(df$Age<=3,'Bébé',
ifelse(df$Age<=8,'Enfant',
ifelse(df$Age<=11,'Pré-ado',
ifelse(df$Age<=15,'Adolescent',
ifelse(df$Age<=25,'Jeune','Adulte')))))
# calcul des frequences
table(df$catLarge)
df['Isabelle']<-ifelse(df$Age>=26,'Adulte',
ifelse(df$Age>=16,'Jeune',
ifelse(df$Age>=12,'Adolescent',
ifelse(df$Age>=9,'Pré-ado',
ifelse(df$Age>=4,'Enfant','Bébé')))))
# calcul des frequences
table(df$catLarge)
table(df$Isabelle)
# creation d'une fonction qui compte de 1 a 10. Cette fonction n'aura pas d'argument
agusto<-function(){
y=1:10
return(y)
}
agusto()
# creation d'une fonction qui ajoute 2 a chacun des elements d'un vecteur de donnees numeriques
s=c(3,6,4,1,2)
pierry<-function(x){
y=x+2
return(y)
}
pierry(s)
# creation d'une fonction qui compte par deux, de 2 a 10. Le resultat sera: 2,4,6,8,10.
paire<-function(){
y=seq(from=2,to=10,by=2)
}
paire()
# creation d'une fonction qui compte par deux, de 2 a 10. Le resultat sera: 2,4,6,8,10.
paire<-function(){
y=seq(from=2,to=10,by=2)
return(y)
}
paire()
# creation d'une fonction qui compte par deux, de 2 a 10. Le resultat sera: 2,4,6,8,10.
compter2<-function(){
y=seq(from=2,to=10,by=2)
return(y)
}
compter2()
###################################################
# creation d'une fonction qui indique pour chacun des elements d'un vecteur s'il
# s'agit d'un nombre pair ou non.
nombrePair<-function(x){
y=ifelse(x%%2==0,'Pair','Impair')
return(y)
}
nombrePair(s)
s
1:3*1:5
install.packages("slidify")
devtools::install_github('slidify','ramnathv')
devtools::install_github('slidify/ramnathv')
devtools::install_github('slidify\ramnathv')
devtools::install_github('ramnathv/slidify')
library(glue)
remove.packages("glue", lib="~/R/win-library/3.6")
devtools::install_github('ramnathv/slidify')
devtools::install_github('ramnathv/slidify')
install.packages("glue")
devtools::install_github('ramnathv/slidify')
library(slidify)
unlink('Untitled/Untitled_cache', recursive = TRUE)
unlink('Untitled/Untitled_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('Untitled/Untitled.Rmd')
unlink('Untitled/Untitled_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('Untitled/Untitled.Rmd')
library(shiny)
library(learnr)
library(shiny)
library(learnr)
library(learnr)
library(learnr)
learnr::quiz
x<-35:100
print(x)
z<-seq(from=24,to=35,by=2)
print(z)
z<-seq(from=24,to=80,by=2)
print(z)
x<-30:15
print(x)
print(u)
u<-30:15
print(u)
v<-seq(from=15,to=1,by=3)
v<-seq(from=15,to=1,by=-3)
print(v)
v<-seq(from=25,to=1,by=-3)
print(v)
unlink('Exercices1/Exercices1_cache', recursive = TRUE)
rmarkdown::shiny_prerendered_clean('Exercices1/Exercices1.Rmd')
x<-sample(20)
x
mean(x)
x[x>mean(x)]
pret<-2000000
pret*.1
pret*0.1
pret*0.1
options(scipen = 20)
pret<-2000000
pret*0.1
90000*6
pret<-2500000
pret/115
84/12
2000*115
pret<-2500000
pret*0.1
90000*6
pret/115
70000/110
30/12
pret/115
pret<-2000000
pret*0.1
90000*6
pret/115
pret*.3
pret<-2000000
pret*0.1
90000*6
pret/115
pret*.3
600000/108
160*4
150*8
pret<-2000000
pret*0.1
90000*6
pret/115
0.5*12
27/40
credit<-rpremierpas::AccesCredit
xlsx::write.xlsx('credi','credit.xlsx')
credit<-rpremierpas::AccesCredit
xlsx::write.xlsx('credit','credit.xlsx')
xlsx::write.xlsx('credit.xlsx','credit')
credit<-rpremierpas::AccesCredit
xlsx::write.xlsx('credit.xlsx','credit')
credit<-rpremierpas::AccesCredit
xlsx::write.xlsx('credit','credit.xlsx')
xlsx::read.xlsx('credit.xlsx')
xlsx::read.xlsx('credit.xlsx',sheetIndex = 1)
credit
xlsx::write.xlsx('credit',credit.xlsx)
xlsx::write.xlsx(credit,'credit.xlsx')
xlsx::read.xlsx('credit.xlsx',sheetIndex = 1)
df_credit<-xlsx::read.xlsx('credit.xlsx',sheetIndex = 1)
mean(df_credit$AGE)
mean(df_credit$AGE,na.rm = T)
mean(df_credit$CHAMBRES,na.rm = T)
xlsx::read.xlsx('Age.xlsx',sheetIndex = 1)
sample(letters)
paste(sample(LETTERS),sample(26),sample(26))
paste(sample(LETTERS),sample(26),sample(26),sep = '')
sample(LETTERS,n=50)
sample(LETTERS,0.5)
paste(sample(LETTERS),sample(26),sample(26),sep = '')
c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )
code<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )
df_age<-xlsx::read.xlsx('Age.xlsx',sheetIndex = 1)
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )
dim(df_age)
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[1-50]
df_age<-xlsx::read.xlsx('Age.xlsx',sheetIndex = 1)
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[1-50]
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[1-49]
c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[-2]
code<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[-2]
code<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[-2];code
code<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[-c(1,5)];code
df_age['code']<-c(paste(sample(LETTERS),sample(26),sample(26),sep = ''),paste(sample(LETTERS),sample(26),sample(26),sep = '') )[-c(1,5)];code
df_age
df_age[,c(2,1)]
xlsx::write.xlsx(df_age[,c(2,1)],'ageData.xlsx')
read.csv('ageData.csv')
ag<-read.csv('ageData.csv')
View(ag)
ag<-read.csv('ageData.csv',sep = ",")
ag<-read.csv('ageData.csv',sep = ";")
attributes(ag)
str(ag)
M<-matrix(1:20,ncol=4)
attributes(M)
str(M)
str(c(1,2,3,4,5))
x<-sample(20) ##creation du vecteur x ##
print(x)
mean(x) ## moyenne du vecteur x ##
sd(x) ## ecart type de x ##
plot(x)  ## realisation de graphique de x ##
x[x>10.5]  ##extraire les valeurs > moyenne ##
x
df_credit<-xlsx::read.xlsx('credit.xlsx',sheetIndex = 1)
# 1) Avec la fonction dim(), trouver le nombre de variables du data frame que vous venez de créer.
dim(df_credit)[2]
View(df_credit)
#2) Quel est l'âge moyen des répondants?
mean(df_credit$AGE)
#2) Quel est l'âge moyen des répondants?
mean(df_credit$AGE,na.rm = T)
#3) Sexe est une variable binaire, prenant la valeur 1 lorsque le répondant est une femme,
#et 0 dans le cas contraire.
table(df_credit$SEXE)
#4) Calculer les proportions de femmes et d'hommes, parmi les répondants
prop.table(table(df_credit$SEXE))
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit$MONTANTPRET>0]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit[MONTANTPRET>0]]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit['MONTANTPRET'>0]]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit['MONTANTPRET']>0]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit[,'MONTANTPRET']>0]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit['MONTANTPRET']>10]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[df_credit['MONTANTPRET']>10000]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
df2_credit<-df_credit[,df_credit['MONTANTPRET']>10000]
#5) Créer un autre data frame, en sélectionnant dans les données de
# l'enquête que les observations (lignes/répondants) ayant obtenu du crédit. Il faut
# donc obtenir un nouveau data frame, avec les mêmes variables que le premier, mais avec
# seulement les répondants qui ont obtenu du crédit.
library(tidyverse)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>0)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>10000)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>100000)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>10000)
View(df2_credit)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>15000)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>15000)
View(df2_credit)
df2_credit<-df_credit%>%
filter('MONTANTPRET'>15000)
df2_credit<-df_credit%>%
split('MONTANTPRET'>15000)
df2_credit<-df_credit%>%
subset('MONTANTPRET'>15000)
df2_credit<-df_credit%>%
group_by_if('MONTANTPRET'>15000)
df2_credit<-df_credit%>%
group_by('MONTANTPRET'>15000)
mean(df2_credit$MONTANTPRET)
df2_credit<-df_credit%>%
group_by(MONTANTPRET>15000)
df2_credit<-df_credit%>%
filter(MONTANTPRET>25000)
df2_credit<-df_credit%>%
filter(MONTANTPRET>25000)
df2_credit<-df_credit%>%
filter(MONTANTPRET>25000)
summary(df_credit$MONTANTPRET)
df2_credit<-df_credit%>%
filter(MONTANTPRET>10000)
summary(df2_credit$MONTANTPRET)
df2_credit<-df_credit%>%
filter(MONTANTPRET>1000000)
df2_credit<-df_credit%>%
filter(MONTANTPRET>500000)
df2_credit<-df_credit%>%
filter(MONTANTPRET>100000)
#4) Calculer séparément le montant moyen des prêts dans le premier data frame et dans le second.
mean(df_credit$MONTANTPRET)
#4) Calculer séparément le montant moyen des prêts dans le premier data frame et dans le second.
mean(df_credit$MONTANTPRET,na.rm = T)
mean(df2_credit$MONTANTPRET,na.rm = T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(sexe)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE,mean,na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE,'mean',na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE,FUN='mean',na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE,FUN='mean')
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE,FUN=mean)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE,mean)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)%>%
mean(MONTANTPRET)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)%>%
mean(MONTANTPRET,na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)%>%
mean(MONTANTPRET,na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)%>%
summarise(MONTANTPRET,na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)%>%
summarise(MONTANTPRET,mean,na.rm=T)
#5) Calculer le montant moyen des prêts, par sexe
df_credit%>%
group_by(SEXE)%>%
summarise(mean(MONTANTPRET,na.rm=T))
df2_credit<-df_credit%>%
filter(MONTANTPRET>100000)
236-(236*.22)
184*2
236*.22
51.92*2
236*2
.1*472
472*.06
28.32
47.2
28.32+47.2
75.52+28.32
600000-437000
